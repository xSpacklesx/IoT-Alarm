#include "arduino_secrets.h"
/* 
  Sketch generated by the Arduino IoT Cloud Thing "Untitled"
  https://create.arduino.cc/cloud/things/ab605ddd-b1a0-4858-89e8-f74d62a64249 

  Arduino IoT Cloud Variables description

  The following variables are automatically generated and updated when changes are made to the Thing

  bool alarmActive;
  bool alarmArmed;

  Variables which are marked as READ/WRITE in the Cloud Thing will also have functions
  which are called when their values are changed from the Dashboard.
  These functions are generated with the Thing and added at the end of this sketch.
*/

#include "thingProperties.h"
#include <Arduino_MKRIoTCarrier.h>
#include <ArduinoMqttClient.h>
#include <WiFiNINA.h>

MKRIoTCarrier carrier;

uint32_t lightColor = carrier.leds.Color(255, 0, 0);

int pir;
int pirState = 0;

WiFiClient wifiClient;
MqttClient mqttClient(wifiClient);

const char broker[] = "test.mosquitto.org";
int        port     = 1883;
const char topic[]  = "champ/iot/spack";

const long interval = 15000;
unsigned long previousMillis = 0;


void setup() {
  // Initialize serial and wait for port to open:
  Serial.begin(9600);
  // This delay gives the chance to wait for a Serial Monitor without blocking if none is found
  delay(1500); 
  
  carrier.noCase();
  carrier.begin();
  

  pir = carrier.getBoardRevision() == 1 ? A5 : A0;
  pinMode(pir, INPUT);
  
  // Defined in thingProperties.h
  initProperties();
  
  // attempt to connect to WiFi network:
  Serial.print("Attempting to connect to WPA SSID: ");
  Serial.println(SECRET_SSID);
  while (WiFi.begin(SECRET_SSID, SECRET_PASS) != WL_CONNECTED) {
    // failed, retry
    Serial.print(".");
    delay(5000);
  }

  Serial.println("You're connected to the network");
  Serial.println();


  Serial.print("Attempting to connect to the MQTT broker: ");
  Serial.println(broker);

  if (!mqttClient.connect(broker, port)) {
    Serial.print("MQTT connection failed! Error code = ");
    Serial.println(mqttClient.connectError());

    while (1);
  }

  Serial.println("You're connected to the MQTT broker!");
  Serial.println();

  // Connect to Arduino IoT Cloud
  ArduinoCloud.begin(ArduinoIoTPreferredConnection);
  
  /*
     The following function allows you to obtain more information
     related to the state of network and IoT Cloud connection and errors
     the higher number the more granular information youâ€™ll get.
     The default is 0 (only errors).
     Maximum is 4
 */
  setDebugMessageLevel(2);
  ArduinoCloud.printDebugInfo();
}

void loop() {
  ArduinoCloud.update();
  mqttClient.poll();
  if(alarmArmed == true){
    pirState = digitalRead(pir);
  
    Serial.print("PIR State: ");
    Serial.println(pirState);
    delay(700);
    
    if(pirState == HIGH){
      alarmActive = true;
    }
    
    if(alarmActive == true){
      unsigned int currentMillis = millis();
      
      activateLights();
      carrier.Buzzer.beep(44, 300);

      if(currentMillis - previousMillis >= interval){
        previousMillis = currentMillis;
        mqttSend();
      }
    }
    else{
      carrier.leds.clear();
      carrier.leds.show();
      carrier.Buzzer.noSound();
    }
  }
  
  if(alarmArmed == false){
    carrier.leds.clear();
    carrier.leds.show();
    alarmActive = false;
    carrier.Buzzer.noSound();
  }

  
}


void mqttSend(){
  mqttClient.beginMessage(topic);
    mqttClient.print("Alarm Active");
    mqttClient.endMessage();
}


void activateLights(){
  carrier.leds.clear();
  carrier.leds.show();
  delay(700);
  carrier.leds.fill(lightColor, 0, 5);
  carrier.leds.show();

}

/*
  Since AlarmArmed is READ_WRITE variable, onAlarmArmedChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAlarmArmedChange()  {
  Serial.print("UPDATED");
}

/*
  Since AlarmActive is READ_WRITE variable, onAlarmActiveChange() is
  executed every time a new value is received from IoT Cloud.
*/
void onAlarmActiveChange()  {
  // Add your code here to act upon AlarmActive change
}


